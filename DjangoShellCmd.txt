
1. Создать двух пользователей 
>>> from django.contrib.auth.models import User
>>> user1 = User.objects.create_user('user1')
>>> user2 = User.objects.create_user('user2') 

2. Cоздать два объекта модели Author, связанные с пользователями. 
>>> from News.models import Author
>>> author1 = Author.objects.create(user=user1)
>>> author2 = Author.objects.create(user=user2)

3. Добавить 4 категории в модель Category.
>>> from News.models import Category
>>> category1 = Category.objects.create(name='Category 1')
>>> category2 = Category.objects.create(name='Category 2')
>>> category3 = Category.objects.create(name='Category 3')
>>> category4 = Category.objects.create(name='Category 4')

4. Добавить 2 статьи и 1 новость.
>>> post1 = Post.objects.create(author=author1, post_type='article', title='Title 1', text = 'Cамый революционный поступок, какой только можно совершить в современном обществе, — это быть счастливым.')
>>> post2 = Post.objects.create(author=author2, post_type='article', title='Title 2', text='Есть только две бесконечные вещи: Вселенная и глупость. Хотя насчет Вселенной я не уверен.')
>>> post3 = Post.objects.create(author=author1, post_type='news', title='Title 3', text='Ничего не случилось – охотничья пуля пропела,Птица умчалась в высокое небо, где стая ждала.')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> from News.models import PostCategory
>>> PostCategory.objects.create(post=post1 , category=category1)
>>> PostCategory.objects.create(post=post1 , category=category2)
>>> PostCategory.objects.create(post=post2 , category=category3)
>>> PostCategory.objects.create(post=post2 , category=category4)
>>> PostCategory.objects.create(post=post3 , category=category1)
>>> PostCategory.objects.create(post=post3 , category=category4)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> from News.models import Comment
>>> comment1 = Comment.objects.create(post=post1, user=user1, text='Comment 1')
>>> comment2 = Comment.objects.create(post=post1, user=user2, text='Comment 2')
>>> comment3 = Comment.objects.create(post=post2, user=user1, text='Comment 3')
>>> comment4 = Comment.objects.create(post=post3, user=user2, text='Comment 4')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> post1.like()
>>> post2.like()
>>> post3.like()
>>> post1.like() 
>>> post2.like()                                                                
>>> post3.like()
>>> post1.like() 
>>> post3.dislike() 
>>> post2.dislike() 
>>> post2.dislike()
>>> comment1.like()
>>> comment2.dislike()
>>> comment3.like()
>>> comment4.dislike()

8. Обновить рейтинги пользователей.
>>> author1.update_rating()                                  
>>> author2.update_rating() 

9. Вывести username и рейтинг лучшего пользователя 
>>> best_author = Author.objects.order_by('-rating').first()
>>> print(best_author.user.username, best_author.rating)

10 Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> best_post = Post.objects.order_by('-rating').first()
>>> print(best_post.data_create, best_post.author.user.username, best_post.rating, best_post.title, best_post.preview())

11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> for comment in best_post.comment_set.all():
...     print(comment.data_create, comment.user.username, comment.rating, comment.text)











